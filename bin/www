#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Tie-Figher:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
*/

//-----------------------------------------------My Content---------------------------------------------//
var options = {
  transports: ["polling"] //setting this options allows the app to run with Heroku
}

var server = http.createServer(app); //Create a server
var io = require('socket.io').listen(server, options); //Include socket.io and listen on the servers ports
var nicknames = []; //Define nickname array to store computer names

io.sockets.on('connection', function(socket){ //Turns sockets io on, allows connections to be made
  socket.on('new user', function(data,callback){ //
    if (nicknames.indexOf(data) != -1){ //If the nickname is already in the array, return false (present message stating "username taken")
      callback(false); 
    } else { //If nickname not in array, return store the name and proceed with program
      callback(true);
      socket.nickname = data;
      nicknames.push(socket.nickname);
      updateNicknames();
    }
  });

  socket.on('buttonpush', function(data){ //When a button is pushed on the home screen, socket.on recieves a message from the client side and emits a "stateupdate".
    // console.log(data); 
    io.sockets.emit('stateupdate', {data: "hello from server"}); //"Hello from server" only for debugging purposes
  });

  function updateNicknames(){ 
    io.sockets.emit('usernames', nicknames); 
  }

  socket.on('disconnect', function(data){ //when a user disconnects, their name is taken out of array.
    if(!socket.nickname) return;
    nicknames.splice(nicknames.indexOf(socket.nickname), 1);
    updateNicknames();
  });
});


// console.log("http server listening on %d", port)

// var wss = new WebSocketServer({server: server})
// console.log("websocket server created")

// wss.on("connection", function(ws) {
//   var id = setInterval(function() {
//     ws.send(JSON.stringify(new Date()), function() {  })
//   }, 1000)

//   console.log("websocket connection open")

//   ws.on("close", function() {
//     console.log("websocket connection close")
//     clearInterval(id)
//   })
// })

//-------------------------------------------------Pre-Made---------------------------------------------//

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
